
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//platform support
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "freertos/event_groups.h"

#include "websocket_api.h"

//WebSocket数据包队列
QueueHandle_t WebSocket_rx_queue;
/*
* websocket server数据解析 
* @param[in]   void  		       :无
* @retval      void                :无
* @note        
*/
void task_process_websocket(void *pvParameters)
{
    (void)pvParameters;
    //WebSocket数据包
    WebSocket_frame_t __RX_frame;
    //create WebSocket RX 队列
    WebSocket_rx_queue = xQueueCreate(10,sizeof(WebSocket_frame_t));
    while (1)
    {
        //接收到WebSocket数据包
        if(xQueueReceive(WebSocket_rx_queue, &__RX_frame, 3*portTICK_PERIOD_MS)==pdTRUE)
        {
        	//打印下
        	ESP_LOGD(TAG, "Websocket Data Length %d, Data: %.*s \r\n", __RX_frame.payload_length, __RX_frame.payload_length, __RX_frame.payload);
        	if (memcmp(__RX_frame.payload, "ON", 2) == 0) {
                if(get_light_state())
    		        led_open();
            } else if (memcmp( __RX_frame.payload,"OFF",3) == 0) {
                led_close();
            } else {
                //把接收到的数据回发
                WS_write_data(__RX_frame.payload, __RX_frame.payload_length);
            }
        	//free memory
			if (__RX_frame.payload != NULL)
				free(__RX_frame.payload);
        }
    }
}

void app_main()
{
    esp_log_level_set("wifi", ESP_LOG_WARN);
    esp_log_level_set("gpio", ESP_LOG_WARN);
    esp_err_t err = nvs_flash_init();
    if (err != ESP_OK) {
        ESP_ERROR_CHECK( nvs_flash_erase() );
        ESP_ERROR_CHECK( nvs_flash_init() );
    }

    //websocket server任务：建立server、等待连接、连接、数据接收打包
    xTaskCreate(ws_server, "ws_server", 2048, NULL, 5, NULL);
    //接收websocket数据任务：数据接收处理
    xTaskCreate(task_process_websocket, "ws_process_rx", 2048, NULL, 5, NULL);

    ESP_LOGI(TAG, "Free heap: %u", xPortGetFreeHeapSize());
    ESP_LOGI(TAG, "Camera demo ready");

}
